=== tests/cases/compiler/substitutionTypesInIndexedAccessTypes.ts ===
// Repro from #31086

type UserArgs = {
>UserArgs : UserArgs

  select?: boolean
>select : boolean | undefined

};

declare function withBoundary<T extends UserArgs>(args?: Subset<T, UserArgs>): T;
>withBoundary : <T extends UserArgs>(args?: Subset<T, UserArgs> | undefined) => T
>args : Subset<T, UserArgs> | undefined

declare function withoutBoundary<T extends UserArgs>(args?: T): T;
>withoutBoundary : <T extends UserArgs>(args?: T | undefined) => T
>args : T | undefined

const boundaryResult = withBoundary({
>boundaryResult : UserArgs
>withBoundary({  select: true,}) : UserArgs
>withBoundary : <T extends UserArgs>(args?: Subset<T, UserArgs> | undefined) => T
>{  select: true,} : { select: true; }

  select: true,
>select : true
>true : true

});

const withoutBoundaryResult = withoutBoundary({
>withoutBoundaryResult : { select: true; }
>withoutBoundary({  select: true,}) : { select: true; }
>withoutBoundary : <T extends UserArgs>(args?: T | undefined) => T
>{  select: true,} : { select: true; }

  select: true,
>select : true
>true : true

});

